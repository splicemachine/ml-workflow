node('dockerpython') {

 // run tests
  try {

    // Mark the code checkout 'stage'....
    stage('Checkout') {
      // Checkout code from repository
      checkout scm
    }

    stage('Prep') {
      // install gem dependencies
      sh 'pip3 install -r infrastructure/requirements.txt --user'
    }

    stage('Apply') {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: 'splicemachine',
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        sh 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} python3 infrastructure/create_pyfunc_repo.py'
      }
    }

  } catch (any) {

    // if there was an exception thrown, the build failed
    setBuildStatus("Build Failed", "FAILURE");
    currentBuild.result = "FAILED"
    throw any

  } finally {

    // success or failure, always send notifications
    setBuildStatus("Build Succeeded", "SUCCESS");
    currentBuild.result = "SUCCESS"

  }
}

def getRepoURL() {
  sh "git config --get remote.origin.url > .git/remote-url"
  return readFile(".git/remote-url").trim()
}

def getCommitSha(){
  sh "git rev-parse HEAD^ > .git/remote-sha"
  return readFile(".git/remote-sha").trim()
}

void setBuildStatus(String message, String state) {
  repoUrl = getRepoURL()
  commitSha = getCommitSha()

  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
      commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}